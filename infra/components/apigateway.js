"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restGateway = exports.restGatewayNestedStack = void 0;
const cdk = require("aws-cdk-lib");
const apig = require("aws-cdk-lib/aws-apigateway");
const helpers = require("./helperScripts");
class restGatewayNestedStack extends cdk.NestedStack {
    constructor(scope, id, description, stageName) {
        super(scope, id);
        this.gateway = new restGateway(scope, id + "_G", description, stageName);
    }
}
exports.restGatewayNestedStack = restGatewayNestedStack;
class restGateway extends apig.RestApi {
    constructor(scope, id, description, stageName = "dev") {
        const props = {
            description: description ? description : 'API Gateway Construct',
            deployOptions: {
                stageName: stageName ? stageName : 'dev',
            },
        };
        super(scope, id, props);
        this.knownResources = {};
        this.scope = scope;
        this.id = id;
        this.apiGatewayURL = this.url;
        this.stageName = stageName;
        helpers.OutputVariable(scope, 'API Rest URL', this.url, "Restful API Gateway URL");
    }
    addCorsOptions(resource) {
        resource.addMethod('OPTIONS', new apig.MockIntegration({
            integrationResponses: [{
                    statusCode: '200',
                    responseParameters: {
                        'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,AuthToken'",
                        'method.response.header.Access-Control-Allow-Methods': "'OPTIONS,GET,PUT,POST,DELETE'",
                        'method.response.header.Access-Control-Allow-Credentials': "'false'",
                        'method.response.header.Access-Control-Allow-Origin': "'*'",
                    },
                }],
            passthroughBehavior: apig.PassthroughBehavior.NEVER,
            requestTemplates: {
                "application/json": "{\"statusCode\": 200}"
            },
        }), {
            methodResponses: [{
                    statusCode: '200',
                    responseParameters: {
                        'method.response.header.Access-Control-Allow-Headers': true,
                        'method.response.header.Access-Control-Allow-Methods': true,
                        'method.response.header.Access-Control-Allow-Credentials': true,
                        'method.response.header.Access-Control-Allow-Origin': true,
                    },
                }]
        });
    }
    GetAPIGatewayArn() {
        // return `arn:aws:execute-api:${this.env.region}:${this.env.account}:${this.restApiId}/dev`
        return `arn:aws:apigateway:${this.env.region}::/restapis/${this.restApiId}/stages/${this.stageName}`;
    }
    AddCognitoAuthorizer(scope, id, UserPools) {
        const auth = new apig.CognitoUserPoolsAuthorizer(scope, id, {
            cognitoUserPools: UserPools
        });
        return auth;
    }
    AddAPIGAuthorizer(scope, id, authFn) {
        const auth = new apig.RequestAuthorizer(scope, id, {
            handler: authFn,
            identitySources: [apig.IdentitySource.header('Authorization')]
        });
        return auth;
    }
    AddResource(FullPath) {
        //Check if there is already a resource.
        if (this.knownResources[FullPath] !== undefined) {
            return this.knownResources[FullPath];
        }
        //Split up the path.
        //check if the base resources already exist, and then return the last one.
        const rootPath = this.root;
        const parts = FullPath.split("/");
        let currentResource = this.knownResources[parts[0]];
        if (this.knownResources[parts[0]] !== undefined) {
            currentResource = this.knownResources[parts[0]];
        }
        else {
            currentResource = rootPath.addResource(parts[0]);
            this.knownResources[parts[0]] = currentResource;
        }
        if (parts.length > 1) {
            for (let i = 1; i < parts.length; i++) {
                let currentPath = parts.slice(0, i).join("/");
                console.log(currentPath);
                try {
                    currentResource = currentResource.addResource(parts[i]);
                    this.knownResources[currentPath] = currentResource;
                }
                catch {
                    currentResource = this.knownResources[currentPath];
                }
            }
        }
        this.addCorsOptions(currentResource);
        return currentResource;
    }
    AddMethodIntegration(integration, route = "", methodString, auth) {
        const resource = this.AddResource(route);
        const method = resource.addMethod(methodString, integration, {
            authorizer: auth,
            authorizationType: auth.authorizationType
        });
        return true;
    }
    AttachWebACL(scope, id) {
        const webACL = this.GetWebACL(scope, id);
        return new cdk.aws_wafv2.CfnWebACLAssociation(this, this.id + '_CDKWebACLAssoc', {
            webAclArn: webACL.attrArn,
            resourceArn: this.GetAPIGatewayArn()
        });
    }
    GetWebACL(scope, id) {
        const wafWebACL = new cdk.aws_wafv2.CfnWebACL(scope, id + "_WebACL", {
            description: "BasicWAF",
            defaultAction: {
                allow: {},
            },
            scope: "REGIONAL",
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: "WAFACLGLOBAL",
                sampledRequestsEnabled: true
            }
        });
        return wafWebACL;
    }
    ExportConfig() {
        return {
            API: {
                endpoints: [
                    {
                        name: this.restApiName,
                        endpoint: this.apiGatewayURL,
                        region: this.env.region
                    },
                ],
            }
        };
    }
}
exports.restGateway = restGateway;
//# sourceMappingURL=data:application/json;base64,