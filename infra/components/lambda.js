"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigGenerator = exports.LambdaCustomResource = exports.LambdaFunctionConstruct = exports.LambdaStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const apig = require("aws-cdk-lib/aws-apigateway");
const cr = require("aws-cdk-lib/custom-resources");
const path = require("path");
const s3_1 = require("./s3");
class LambdaStack extends cdk.NestedStack {
    constructor(scope, id, runTime, codePathString, mainFunc, timeOut, memory = 128, storage = 512, envs = {}, layers = []) {
        super(scope, id);
        this.lambdaFunction = new LambdaFunctionConstruct(scope, id + "_FUNC", runTime, codePathString, mainFunc, timeOut, memory, storage, envs, layers);
    }
    MethodIntegration() {
        return new apig.LambdaIntegration(this.lambdaFunction, { proxy: true });
    }
}
exports.LambdaStack = LambdaStack;
class LambdaFunctionConstruct extends lambda.Function {
    constructor(scope, id, runTime, codePathString, mainFunc, timeOut, memory = 128, storage = 512, envs = {}, layers = []) {
        const lambdaHandler = codePathString + mainFunc;
        //const lambdaHandler = codePathString.split("/").at(-1) + "." + mainFunc
        const props = {
            runtime: runTime,
            handler: lambdaHandler,
            code: lambda.Code.fromAsset(path.join(__dirname, codePathString)),
            timeout: timeOut ? timeOut : cdk.Duration.seconds(3),
            memorySize: memory,
            ephemeralStorageSize: cdk.Size.mebibytes(storage),
            environment: envs,
            layers: layers
        };
        super(scope, id, props);
    }
    MethodIntegration() {
        return new apig.LambdaIntegration(this, { proxy: true });
    }
}
exports.LambdaFunctionConstruct = LambdaFunctionConstruct;
class LambdaCustomResource extends LambdaFunctionConstruct {
    constructor(scope, id, runTime, codePathString, mainFunc, timeOut, memory = 128, storage = 512, envs = {}, bucket) {
        super(scope, id, runTime, codePathString, mainFunc, timeOut, memory, storage, envs);
        this.crp = new cr.Provider(scope, id + "_crp", {
            onEventHandler: this
        });
    }
    Execute(scope, id, properties) {
        return new cdk.CustomResource(scope, id, {
            serviceToken: this.crp.serviceToken,
            properties: {
                "Params": properties
            }
        });
    }
}
exports.LambdaCustomResource = LambdaCustomResource;
class ConfigGenerator extends LambdaCustomResource {
    constructor(scope, id, Configuration, existingBucket) {
        const configBucket = existingBucket ? existingBucket : new s3_1.S3Bucket(scope, id + "-ConfigBucket", cdk.RemovalPolicy.DESTROY);
        const envs = {
            'BucketName': configBucket.bucketName
        };
        super(scope, id, cdk.aws_lambda.Runtime.PYTHON_3_9, './component_scripts/configCreator', 'lambda_handler', undefined, undefined, undefined, envs);
        this.bucket = configBucket;
        this.bucket.grantWrite(this);
        this.Execute(scope, id + "_execute", Configuration);
    }
}
exports.ConfigGenerator = ConfigGenerator;
//# sourceMappingURL=data:application/json;base64,