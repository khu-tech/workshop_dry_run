"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Main = exports.MainStack = void 0;
const cdk = require("aws-cdk-lib");
const helpers = require("../components/helperScripts");
const s3_1 = require("../components/s3");
const lambda_1 = require("../components/lambda");
const ddb_1 = require("../components/ddb");
const cognito_1 = require("../components/cognito");
const apigateway_1 = require("../components/apigateway");
const ddb = require("aws-cdk-lib/aws-dynamodb");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const webSiteDistribution_1 = require("../components/webSiteDistribution");
class MainStack extends cdk.Stack {
    constructor(app, id, props) {
        super(app, id, props);
        const contextValues = {};
        this.mainStack = new Main(this, contextValues);
    }
}
exports.MainStack = MainStack;
class Main {
    constructor(scope, contextValues) {
        //Make S3 Bucket
        const storageBucket = new s3_1.S3Bucket(scope, "StorageBucket", cdk.RemovalPolicy.DESTROY);
        //DynamoDB Database
        const storageDatabase = new ddb_1.DDBTable(scope, "StorageDatabase", "bucket", "key", aws_dynamodb_1.BillingMode.PAY_PER_REQUEST, cdk.RemovalPolicy.DESTROY);
        const leaderboardDatabase = new ddb_1.DDBTable(scope, "LeaderboardDatabase", "playerId", undefined, aws_dynamodb_1.BillingMode.PAY_PER_REQUEST, cdk.RemovalPolicy.DESTROY);
        // Add Global Secondary Index to Leaderboard Database for Ranking queries
        leaderboardDatabase.addGlobalSecondaryIndex({
            indexName: 'rankingIndex',
            partitionKey: {
                name: 'status',
                type: ddb.AttributeType.NUMBER
            },
            sortKey: {
                name: 'score',
                type: ddb.AttributeType.NUMBER
            }
        });
        //Lambda layer
        const storageEnvs = {
            BUCKET_NAME: storageBucket.bucketName,
            TABLE_NAME: storageDatabase.tableName
        };
        const highScoreEnvs = {
            TABLE_NAME: leaderboardDatabase.tableName
        };
        //Make Nested Lambda Stack(s)
        const getAssetLambda = new lambda_1.LambdaStack(scope, "getAssetLambda", cdk.aws_lambda.Runtime.NODEJS_18_X, '../lambdaScripts/getAsset', 'handler', cdk.Duration.minutes(5), 512, 512, storageEnvs);
        const getHighScoreLambda = new lambda_1.LambdaStack(scope, "getPlayerInfoLambda", cdk.aws_lambda.Runtime.NODEJS_18_X, '../lambdaScripts/getPlayerInfo', 'handler', cdk.Duration.minutes(5), 512, 512, highScoreEnvs);
        const putHighScoreLambda = new lambda_1.LambdaStack(scope, "putPlayerRecordLambda", cdk.aws_lambda.Runtime.NODEJS_18_X, '../lambdaScripts/putPlayerRecord', 'handler', cdk.Duration.minutes(5), 512, 512, highScoreEnvs);
        //const preSignupLambda = new LambdaStack(scope, "preSignupLambda", cdk.aws_lambda.Runtime.NODEJS_18_X, '../lambdaScripts/preSignup', 'handler', cdk.Duration.minutes(5), 512, 512);
        //const preSignupFunction = preSignupLambda.getLambdaFunction();
        //Grant Lambda functions read/write access to S3 bucket
        storageBucket.grantReadWrite(getAssetLambda.lambdaFunction);
        //Grant Lambda functions read/write access to DDB table
        storageDatabase.grantReadWriteData(getAssetLambda.lambdaFunction);
        leaderboardDatabase.grantReadData(getHighScoreLambda.lambdaFunction);
        leaderboardDatabase.grantReadWriteData(putHighScoreLambda.lambdaFunction);
        // Define a Lambda function
        //Build Cognito Stack
        const cognitoStack = new cognito_1.CognitoStack(scope, "auth", true, true);
        //const adminEmail=cognitoStack.AddUser(scope, "AdminUser", "AdminEmail", cognitoStack.userPool.userPoolId)
        //Build API Gateway
        const apiGateway = new apigateway_1.restGatewayNestedStack(scope, "gateway", "Main Stack Gateway", "dev").gateway;
        // apiGateway.AttachWebACL(scope, "apigACL");
        const apiAuthorizer = apiGateway.AddCognitoAuthorizer(scope, "API_Authorizer", [cognitoStack.userPool]);
        apiGateway.AddMethodIntegration(getAssetLambda.MethodIntegration(), "assets", "GET", apiAuthorizer);
        apiGateway.AddMethodIntegration(putHighScoreLambda.MethodIntegration(), "leaderboard", "POST", apiAuthorizer);
        apiGateway.AddMethodIntegration(getHighScoreLambda.MethodIntegration(), "leaderboard/{playerId}", "GET", apiAuthorizer);
        //Upload Website
        const website = new webSiteDistribution_1.WebSiteDeployment(scope, "webDeployment", '../../web/dist', 'index.html', apiGateway, storageBucket);
        // const apiURL = website.AddDistributionBehavior('/apis/*', new cdk.aws_cloudfront_origins.RestApiOrigin(apiGateway, {}));
        // apiGateway.apiGatewayURL = website.cloudfrontDistribution.distributionDomainName + "/apis"
        const configJson = {
            //   ...storageBucket.ExportConfig(),
            //   ...apiGateway.ExportConfig(),
            ...cognitoStack.ExportConfig()
        };
        // const configGen=new ConfigGenerator(scope, 'ConfigGen', configJson);
        // configGen.node.addDependency([website.cloudfrontDistribution]);
        helpers.OutputVariable(scope, "Params", configJson, "Configuration");
        helpers.OutputVariable(scope, "CLI Set User Password Command", `aws cognito-idp admin-set-user-password --user-pool-id ${cognitoStack.userPool.userPoolId} --permanent --username {insert email} --password {insert password}`, "Configure admin password");
    }
}
exports.Main = Main;
//# sourceMappingURL=data:application/json;base64,